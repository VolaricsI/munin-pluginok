#!/usr/bin/perl -w
#
# xmlrpc based munin plugin for monitoring rTorrent's upload/download speed
# prerequisites:
#  - rTorrent 0.7.5 or newer compiled with --with-xmlrpc-c
# check http://libtorrent.rakshasa.no/wiki/RTorrentXMLRPCGuide for further informations
#
# written by Gabor Hudiczius
# web: http://rtwi.jmk.hu/wiki/rTorrentOMeter
# email: ghudiczius@gmail.com
#
#
# Parameters:
#
#	config		required
#
#
# Configurable variables
#
#	src			"socket" when using scgi_socket, or anything else when using scgi_port
#	socket		rTorrent's rpc socket (scgi_local)	- using scgi_local	- needed, when "src" is set to "socket"
#	ip			rTorrent's ip address				- using scgi_port	- needed, when "src" is NOT set to "socket"
#	port		rTorrent's scgi port (scgi_port)	- using scgi_port	- needed, when "src" is NOT set to "socket"
#
#	diff		"yes" for using bits per second for upload and Bytes per second for download, or anything else for using Bytes per second for both
#
#
# Configuration example
#
#	[rtom__spdd]
#	user username
#	env.src socket
#	env.socket /home/username/torrent/.socket/rpc.socket
#
#	[rtom__spdd]
#	env.ip 127.0.0.1
#	env.port 5000
#
#
#%# family=auto

my $src 		= $ENV{"src"} || "";
my $ip			= $ENV{"ip"} || "127.0.0.1";
my $port		= $ENV{"port"} || 5000;
my $socket		= $ENV{"socket"} || "";
my $diff		= $ENV{"diff"} || 0;

#if ( $0 =~ /^(?:|.*\/)rtom_(.*)_spdd$/ ) {
#    $user = " for ${1}";
#} else {
    $user = "";
#}

if ( $ARGV[0] and $ARGV[0] eq "autoconf" ) {
	exit 1;
}

if ( $ARGV[0] and $ARGV[0] eq "config" ) {
	print "graph_order down up downrate uprate\n";
	print "graph_title rTorrent speeds${user}\n";
	print "graph_args --base 1024 --lower-limit 0\n";
	print "graph_vlabel Bytes per \${graph_period}\n";
	print "graph_category rTorrent${user}\n";
	print "down.label Download (Bytes)\n";
	print "down.info Download speed in Bytes per \${graph_period}\n";
	print "down.type DERIVE\n";
	print "down.min 0\n";
	print "down.draw AREA\n";
	if ( $diff eq "yes" ) {
		print "up.label Upload (bits)\n";
		print "up.info Upload speed in bits per \${graph_period}\n";
		print "up.cdef up,8,*\n";
	} else {
		print "up.label Upload (Bytes)\n";
		print "up.info Upload speed in Bytes per \${graph_period}\n";
	}
	print "up.type DERIVE\n";
	print "up.min 0\n";
	print "up.draw LINE2\n";
	print "downrate.label Download limit (Bytes)\n";
	print "downrate.info Download limit in Bytes per \${graph_period}\n";
	print "downrate.draw LINE2\n";
	if ( $diff eq "yes" ) {
		print "uprate.label Upload limit (bits)\n";
		print "uprate.info Upload limit in bits per \${graph_period}\n";
		print "uprate.cdef uprate,8,*\n";
	} else {
		print "uprate.label Upload limit (Bytes)\n";
		print "uprate.info Upload limit in Bytes per \${graph_period}\n";
	}
	print "uprate.draw LINE2\n";
	exit 0;
}

use IO::Socket;

my $pattern	= qr/<value><(int|i4|i8|ex\.i8)>([-]{0,1}\d+)<\/(int|i4|i8|ex\.i8)><\/value>/;

my $line	= "<?xml version=\"1.0\" encoding=\"utf-8\"?><methodCall><methodName>system.multicall</methodName><params><param><value><array><data><value><struct><member><name>methodName</name><value><string>get_up_total</string></value></member><member><name>params</name><value><array><data/></array></value></member></struct></value><value><struct><member><name>methodName</name><value><string>get_down_total</string></value></member><member><name>params</name><value><array><data/></array></value></member></struct></value><value><struct><member><name>methodName</name><value><string>get_upload_rate</string></value></member><member><name>params</name><value><array><data/></array></value></member></struct></value><value><struct><member><name>methodName</name><value><string>get_download_rate</string></value></member><member><name>params</name><value><array><data/></array></value></member></struct></value></data></array></value></param></params></methodCall>";
my $llen	= length $line;
my $header	= "CONTENT_LENGTH\000${llen}\000SCGI\001\000";
my $hlen	= length $header;
$line		= "${hlen}:${header},${line}";

if ( $src eq "socket" ) {
	socket( SOCK, PF_UNIX, SOCK_STREAM, 0 );
	connect( SOCK, sockaddr_un( $socket ) );
} else {
	socket( SOCK, PF_INET, SOCK_STREAM, getprotobyname( "tcp" ) );
	connect( SOCK, sockaddr_in( $port, inet_aton( $ip ) ) );
}

print SOCK $line;
flush SOCK;

my $up;
my $down;
my $uprate;
my $downrate;

while ( ( !defined $up ) && ( $line = <SOCK> ) ) {
	if ( $line =~ /$pattern/ ) {
		$up = $2;
	}
}

while ( ( !defined $down ) && ( $line = <SOCK> ) ) {
	if ( $line =~ /$pattern/ ) {
		$down = $2;
	}
}

while ( ( !defined $uprate ) && ( $line = <SOCK> ) ) {
	if ( $line =~ /$pattern/ ) {

		$uprate = $2;
	}
}

while ( ( !defined $downrate ) && ( $line = <SOCK> ) ) {
	if ( $line =~ /$pattern/ ) {
		$downrate = $2;
	}
}

close (SOCK);

print "up.value ${up}\ndown.value ${down}\nuprate.value ${uprate}\ndownrate.value ${downrate}\n";

exit;
